// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Status string

const (
	StatusInit      Status = "init"
	StatusProcessed Status = "processed"
	StatusCompleted Status = "completed"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status
	Valid  bool // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type Branch struct {
	ID         int64  `json:"id"`
	BranchName string `json:"branch_name"`
}

type Entry struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
	// can be negative or positive
	Amount    int64     `json:"amount"`
	Messages  int64     `json:"messages"`
	CreatedAt time.Time `json:"created_at"`
}

type Message struct {
	ID             int64     `json:"id"`
	WhoAskID       int64     `json:"who_ask_id"`
	WhoAnswerID    int64     `json:"who_answer_id"`
	Specialization int64     `json:"specialization"`
	MessageText    string    `json:"message_text"`
	CreatedAt      time.Time `json:"created_at"`
}

type Purchase struct {
	ID            int64     `json:"id"`
	FromAccountID int64     `json:"from_account_id"`
	AmountFiat    float64   `json:"amount_fiat"`
	AmountCoins   int64     `json:"amount_coins"`
	StatusP       Status    `json:"status_p"`
	CreatedAt     time.Time `json:"created_at"`
}

type Setting struct {
	ID        int64     `json:"id"`
	Rate      float64   `json:"rate"`
	CreatedAt time.Time `json:"created_at"`
}

type Specialization struct {
	ID       int64        `json:"id"`
	Branch   int64        `json:"branch"`
	UserID   int64        `json:"user_id"`
	SpecName string       `json:"spec_name"`
	Descr    string       `json:"descr"`
	IsOnline sql.NullBool `json:"is_online"`
}

type Transfer struct {
	ID            int64     `json:"id"`
	FromAccountID int64     `json:"from_account_id"`
	ToAccountID   int64     `json:"to_account_id"`
	Amount        int64     `json:"amount"`
	CreatedAt     time.Time `json:"created_at"`
}

type UserAccount struct {
	ID             int64     `json:"id"`
	Nickname       string    `json:"nickname"`
	Email          string    `json:"email"`
	Balance        int64     `json:"balance"`
	HashedPassword string    `json:"hashed_password"`
	Resp           bool      `json:"resp"`
	CreatedAt      time.Time `json:"created_at"`
}

type Withdraw struct {
	ID            int64     `json:"id"`
	FromAccountID int64     `json:"from_account_id"`
	AmountFiat    float64   `json:"amount_fiat"`
	AmountCoins   int64     `json:"amount_coins"`
	StatusW       Status    `json:"status_w"`
	CreatedAt     time.Time `json:"created_at"`
}
