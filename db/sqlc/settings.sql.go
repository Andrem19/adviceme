// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: settings.sql

package db

import (
	"context"
)

const createSettings = `-- name: CreateSettings :one
INSERT INTO settings (
  rate
) VALUES (
  $1
) RETURNING id, rate, created_at
`

func (q *Queries) CreateSettings(ctx context.Context, rate float64) (Setting, error) {
	row := q.db.QueryRowContext(ctx, createSettings, rate)
	var i Setting
	err := row.Scan(&i.ID, &i.Rate, &i.CreatedAt)
	return i, err
}

const getAllSettings = `-- name: GetAllSettings :many
SELECT id, rate, created_at FROM settings
ORDER BY created_at
`

func (q *Queries) GetAllSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, getAllSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Setting{}
	for rows.Next() {
		var i Setting
		if err := rows.Scan(&i.ID, &i.Rate, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSettings = `-- name: GetSettings :one
SELECT id, rate, created_at FROM settings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSettings(ctx context.Context, id int64) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSettings, id)
	var i Setting
	err := row.Scan(&i.ID, &i.Rate, &i.CreatedAt)
	return i, err
}

const updateSettingsRate = `-- name: UpdateSettingsRate :one
UPDATE settings
SET rate = $2
WHERE id = $1
RETURNING id, rate, created_at
`

type UpdateSettingsRateParams struct {
	ID   int64   `json:"id"`
	Rate float64 `json:"rate"`
}

func (q *Queries) UpdateSettingsRate(ctx context.Context, arg UpdateSettingsRateParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, updateSettingsRate, arg.ID, arg.Rate)
	var i Setting
	err := row.Scan(&i.ID, &i.Rate, &i.CreatedAt)
	return i, err
}
