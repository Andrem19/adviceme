// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: withdraw.sql

package db

import (
	"context"
	"database/sql"
)

const createWithdraw = `-- name: CreateWithdraw :one
INSERT INTO withdraw (
  from_account_id,
  amount_fiat,
  amount_coins,
  status_w
) VALUES (
  $1, $2, $3, 4
) RETURNING id, from_account_id, amount_fiat, amount_coins, status_w, created_at
`

type CreateWithdrawParams struct {
	FromAccountID sql.NullInt64   `json:"from_account_id"`
	AmountFiat    sql.NullFloat64 `json:"amount_fiat"`
	AmountCoins   sql.NullInt64   `json:"amount_coins"`
}

func (q *Queries) CreateWithdraw(ctx context.Context, arg CreateWithdrawParams) (Withdraw, error) {
	row := q.db.QueryRowContext(ctx, createWithdraw, arg.FromAccountID, arg.AmountFiat, arg.AmountCoins)
	var i Withdraw
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.AmountFiat,
		&i.AmountCoins,
		&i.StatusW,
		&i.CreatedAt,
	)
	return i, err
}

const getAllWithdraw = `-- name: GetAllWithdraw :many
SELECT id, from_account_id, amount_fiat, amount_coins, status_w, created_at FROM withdraw
WHERE from_account_id = $1
ORDER BY created_at
`

func (q *Queries) GetAllWithdraw(ctx context.Context, fromAccountID sql.NullInt64) ([]Withdraw, error) {
	rows, err := q.db.QueryContext(ctx, getAllWithdraw, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Withdraw{}
	for rows.Next() {
		var i Withdraw
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.AmountFiat,
			&i.AmountCoins,
			&i.StatusW,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWithdraw = `-- name: GetWithdraw :one
SELECT id, from_account_id, amount_fiat, amount_coins, status_w, created_at FROM withdraw
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWithdraw(ctx context.Context, id int64) (Withdraw, error) {
	row := q.db.QueryRowContext(ctx, getWithdraw, id)
	var i Withdraw
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.AmountFiat,
		&i.AmountCoins,
		&i.StatusW,
		&i.CreatedAt,
	)
	return i, err
}

const updateWithdraw = `-- name: UpdateWithdraw :one
UPDATE withdraw
SET amount_coins = $2, amount_fiat = $3
WHERE id = $1
RETURNING id, from_account_id, amount_fiat, amount_coins, status_w, created_at
`

type UpdateWithdrawParams struct {
	ID          int64           `json:"id"`
	AmountCoins sql.NullInt64   `json:"amount_coins"`
	AmountFiat  sql.NullFloat64 `json:"amount_fiat"`
}

func (q *Queries) UpdateWithdraw(ctx context.Context, arg UpdateWithdrawParams) (Withdraw, error) {
	row := q.db.QueryRowContext(ctx, updateWithdraw, arg.ID, arg.AmountCoins, arg.AmountFiat)
	var i Withdraw
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.AmountFiat,
		&i.AmountCoins,
		&i.StatusW,
		&i.CreatedAt,
	)
	return i, err
}

const updateWithdrawStatus = `-- name: UpdateWithdrawStatus :one
UPDATE withdraw
SET status_w = $2
WHERE id = $1
RETURNING id, from_account_id, amount_fiat, amount_coins, status_w, created_at
`

type UpdateWithdrawStatusParams struct {
	ID      int64      `json:"id"`
	StatusW NullStatus `json:"status_w"`
}

func (q *Queries) UpdateWithdrawStatus(ctx context.Context, arg UpdateWithdrawStatusParams) (Withdraw, error) {
	row := q.db.QueryRowContext(ctx, updateWithdrawStatus, arg.ID, arg.StatusW)
	var i Withdraw
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.AmountFiat,
		&i.AmountCoins,
		&i.StatusW,
		&i.CreatedAt,
	)
	return i, err
}
