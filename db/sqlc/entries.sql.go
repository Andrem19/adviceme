// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: entries.sql

package db

import (
	"context"
	"database/sql"
)

const createEntries = `-- name: CreateEntries :one
INSERT INTO entries (
  user_id,
  amount,
  messages
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, amount, messages, created_at
`

type CreateEntriesParams struct {
	UserID   sql.NullInt64 `json:"user_id"`
	Amount   int64         `json:"amount"`
	Messages int64         `json:"messages"`
}

func (q *Queries) CreateEntries(ctx context.Context, arg CreateEntriesParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntries, arg.UserID, arg.Amount, arg.Messages)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Messages,
		&i.CreatedAt,
	)
	return i, err
}

const getAllUserEntries = `-- name: GetAllUserEntries :many
SELECT id, user_id, amount, messages, created_at FROM entries
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) GetAllUserEntries(ctx context.Context, userID sql.NullInt64) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserEntries, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Messages,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntries = `-- name: GetEntries :one
SELECT id, user_id, amount, messages, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntries(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntries, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Messages,
		&i.CreatedAt,
	)
	return i, err
}
