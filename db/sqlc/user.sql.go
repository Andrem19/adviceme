// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: user.sql

package db

import (
	"context"
)

const addUserBalance = `-- name: AddUserBalance :one
UPDATE user_account
SET balance = balance + $2
WHERE id = $1
RETURNING id, nickname, email, balance, hashed_password, resp, created_at
`

type AddUserBalanceParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) AddUserBalance(ctx context.Context, arg AddUserBalanceParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, addUserBalance, arg.ID, arg.Balance)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Email,
		&i.Balance,
		&i.HashedPassword,
		&i.Resp,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user_account (
  nickname,
  email,
  balance,
  hashed_password,
  resp
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, nickname, email, balance, hashed_password, resp, created_at
`

type CreateUserParams struct {
	Nickname       string `json:"nickname"`
	Email          string `json:"email"`
	Balance        int64  `json:"balance"`
	HashedPassword string `json:"hashed_password"`
	Resp           bool   `json:"resp"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Nickname,
		arg.Email,
		arg.Balance,
		arg.HashedPassword,
		arg.Resp,
	)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Email,
		&i.Balance,
		&i.HashedPassword,
		&i.Resp,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user_account
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, nickname, email, balance, hashed_password, resp, created_at FROM user_account
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Email,
		&i.Balance,
		&i.HashedPassword,
		&i.Resp,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, nickname, email, balance, hashed_password, resp, created_at FROM user_account
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Email,
		&i.Balance,
		&i.HashedPassword,
		&i.Resp,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAccount = `-- name: GetUserAccount :one
SELECT id, nickname, email, balance, hashed_password, resp, created_at FROM user_account
WHERE nickname = $1 LIMIT 1
`

func (q *Queries) GetUserAccount(ctx context.Context, nickname string) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getUserAccount, nickname)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Email,
		&i.Balance,
		&i.HashedPassword,
		&i.Resp,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, nickname, email, balance, hashed_password, resp, created_at FROM user_account
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]UserAccount, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAccount{}
	for rows.Next() {
		var i UserAccount
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.Email,
			&i.Balance,
			&i.HashedPassword,
			&i.Resp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subUserBalance = `-- name: SubUserBalance :one
UPDATE user_account
SET balance = balance - $2
WHERE id = $1
RETURNING id, nickname, email, balance, hashed_password, resp, created_at
`

type SubUserBalanceParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) SubUserBalance(ctx context.Context, arg SubUserBalanceParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, subUserBalance, arg.ID, arg.Balance)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Email,
		&i.Balance,
		&i.HashedPassword,
		&i.Resp,
		&i.CreatedAt,
	)
	return i, err
}
